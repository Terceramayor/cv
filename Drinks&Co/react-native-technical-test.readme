Bienvenido a la prueba técnica de Drinks and Co para front-end developers.

Hemos dividido la prueba técnica en dos áreas. Una primera parte más teórica, y una segunda más práctica donde te
pediremos que programes una pequeña webapp.

Por último, te agradecermos cualquier feedback sobre esta prueba.

¡Buena suerte!

# Parte 1

A continuación te planteamos:

- **¿En CSS existen varias unidades de medida (px, em, rem, vh, vw…). ¿Podrías explicarnos en qué casos utilizarias cada una?**

px: Píxeles. Es una medida absoluta. Se utiliza para definir elementos con dimensiones fijas, como por ejemplo, la anchura de un borde, 
la longitud de un sombreado o un contenedor que queremos que alguna de sus dimensiones sea fija.

%: Porcentage respecto al contenedor padre. Se utiliza para generar contenedores responsive. 

em: Proporcion respecto el font-size definido en un contenedor. Se puede utilizar por ejemplo para definir tamaño de margenes/paddings

rem: Proporcion respecto el font-size definida por defecto. Se le puede dar el mismo uso que a la unidad "em" pero estandariza más 
la medida ya que queda referenciada siempre a un único valor (en lugar de depender del tamaño de fuente de cada contenedor donde se utilice)

vh: Dimensión, en porcentage, respecto la altura del navegador. Un caso de uso sería, por ejemplo, ajustar la altura de un footer/header en función de la altura del navegador.

vw: Dimensión, en porcentage, respecto la anchura del navegador. Un caso de uso sería, por ejemplo, ajustar el tamaño de una imagen o video en función de la anchura de la ventana del navegador de forma que ocupe una francción determinada.

- **Teniendo en cuenta el siguiente código, ¿de qué color será el texto `You are awesome`? ¿Por qué?:**
```html
<style>
  ul.shopping-list li.favorite span {
    color: blue;
  }

  ul#awesomeProduct li {
    color: red;
  }
</style>
```
```html
<ul id="awesomeProduct" class="shopping-list">
  <li><span>Milk</span></li>
  <li id="buyThis" class="favorite"><span class="highlight">You are awesome</span></li>
</ul>
```
El color será azul. La selección por id (ul#awesomeProduct) es superior en jerarquía al resto de selectores individualmente, por lo que sus hijos (y nietos) 
deberían ser rojos. Ahora bien, la combinación de clase y selector de tag  (li.favorite span) supera en jerarquía al id por ser más específico.

- **En Javascript puedes testear la igualdad mediante doble igual o triple igual (`==` `===`). ¿Sabrías decirnos diferencias y ventajas de cada uno?**

=== implica strict equality. Esta igualdad compara valores y tipos de valores. Ambos tienen que coincidir para retornar true.
2===2 se evaluaría como true, pero 2==="2" se evaluaría como false. La ventaja es que con la comparación estricta es muy facil predecir 
el valor de retorno de la comparación. En general, se recomienda usar siempre la igualdad estricta.

== implica loose equality. Esta igualdad compara valores después de realizar, si es posible y necesario, un cambio del tipo de variable
para que los valores a comparar sean del mismo tipo. 2==2 se evaluaría como true y 2=="2" también se evaliaría como true ya que se convierte al mismo tipo de valor. 
Tiene la ventaja de que realiza el cambio de tipo de variable, lo cual, en algún caso puede ser interesante. Por ejemplo si queremos comparar
un número con un número introducido por el usuario a través de un input de texto.
En cualquier caso se desaconseja su uso a no ser que se tenga muy claro toda la casuística posible, la cual no resulta evidente.
Aquí se recoge (https://dorey.github.io/JavaScript-Equality-Table/) <--Esto lo vimos en el bootcamp


- **Nos gustaría que el siguiente código mostrara `hey Maria`, pero nos devuelve `hey Raynold`. ¿Cómo lo solucionarias?**
```js
function getName(person) {
if (person == { name: 'Maria' }) {
return 'hey Maria'
} else {
return 'hey Raynold'
}
}
getName({ name: 'Maria' })

La razón por la que retorna `hey Raynold` es porque el objeto contra el cual se hace la comparación nunca va a ser el mismo que el que se le pase como argumento a la función
ya que los objetos no son valores primitivos. Cuando se declara un objeto, éste es siempre un objeto nuevo auqnue contenga los mismo campos y valores que cualquier otro objeto.

OPCIÓN 1: Comparamos directamente el campo "name". Funcionaría en este caso, pero funcionaria también en el caso de que el objeto pasado como argumento a la funcion posea mas campos además de "name"( e independientemente de su orden)

function getName(person) {
  if (person.name ===  'Maria' ) {
    return 'hey Maria'
  } else {
    return 'hey Raynold'
  }
}

OPCIÓN 2: Convertimos los objetos a string y los comparamos.

function getName(person) {
  if (JSON.stringify(person) ===  JSON.stringify({ name: 'Maria' }) ) {
    return 'hey Maria'
  } else {
    return 'hey Raynold'
  }
}

```


# Parte 2

En Drinks and Co estamos rediseñando nuestro ecommerce y para evaluar tus conocimientos en front-end, queremos que nos
hagas una propuesta de nuestro checkout utilizando *Vue.js*. Por desgracia, en esta ocasión, nuestro equipo de UX/UI
sólo nos ha podido preparar un wireframe para Desktop, por lo que tendrás que imaginarte la versión mobile.
Además, tendrás que mostrar los datos que te devuelve nuestra API mediante el siguiente endpoint:
```
http://demo0915487.mockable.io/cart
```
# Wireframe
![](https://live.staticflickr.com/7402/16376980461_fbbd43ec65_b.jpg)

## Valoraremos positivamente:
- El uso de buenas prácticas y que utilices el potencial de ES6.
- Que incluyas tests de tus componentes.
- Si utilizas librerias, explicanos por qué las has escogido.
- Recuerda, se trata de una prueba técnica de front-end, no de UX/UI Designer. Evaluaremos cómo utilizas CSS, no el look and feel final. 